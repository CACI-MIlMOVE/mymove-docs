"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[1715],{41014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));t(8209);const r={},s="Transportation Account Parsing",o={unversionedId:"backend/tget/parsing/transportation-account",id:"backend/tget/parsing/transportation-account",title:"Transportation Account Parsing",description:"Importing Package",source:"@site/docs/backend/tget/parsing/transportation-account.md",sourceDirName:"backend/tget/parsing",slug:"/backend/tget/parsing/transportation-account",permalink:"/mymove-docs/docs/backend/tget/parsing/transportation-account",draft:!1,editUrl:"https://github.com/caci-milmove/mymove-docs/edit/main/docs/backend/tget/parsing/transportation-account.md",tags:[],version:"current",frontMatter:{},sidebar:"backendSidebar",previous:{title:"Parsing TGET .txt file data",permalink:"/mymove-docs/docs/backend/tget/parsing/"}},l={},d=[{value:"Importing Package",id:"importing-package",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Expected Results",id:"expected-results",level:2},{value:"Parsing Functions",id:"parsing-functions",level:2},{value:"Additional Processing Functions",id:"additional-processing-functions",level:2},{value:"Pruning",id:"pruning",level:3},{value:"Consolidating / Removing Duplicates",id:"consolidating--removing-duplicates",level:3}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"transportation-account-parsing"},"Transportation Account Parsing"),(0,a.kt)("h2",{id:"importing-package"},"Importing Package"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'"github.com/transcom/mymove/pkg/parser/tac"')),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"The following assumptions are made when parsing the .txt files:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The first and last lines are the security classification."),(0,a.kt)("li",{parentName:"ol"},"The second line of the file are the columns that will be a 1:1 match to the TransportationAccountingCodeTrdmFileRecord struct in pipe delimited format."),(0,a.kt)("li",{parentName:"ol"},"There are 23 values per line, excluding the security classification. Again, to know what these values are refer to note #2."),(0,a.kt)("li",{parentName:"ol"},"All values are in pipe delimited format."),(0,a.kt)("li",{parentName:"ol"},"Null values will be present, but are not acceptable for TRNSPRTN_ACNT_CD.")),(0,a.kt)("p",null,"The following columns are expected on the second line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// This struct only applies to the received .txt file.\ntype TransportationAccountingCodeTrdmFileRecord struct {\n    TAC_SYS_ID              string\n    LOA_SYS_ID              string\n    TRNSPRTN_ACNT_CD        string\n    TAC_FY_TXT              string\n    TAC_FN_BL_MOD_CD        string\n    ORG_GRP_DFAS_CD         string\n    TAC_MVT_DSG_ID          string\n    TAC_TY_CD               string\n    TAC_USE_CD              string\n    TAC_MAJ_CLMT_ID         string\n    TAC_BILL_ACT_TXT        string\n    TAC_COST_CTR_NM         string\n    BUIC                    string\n    TAC_HIST_CD             string\n    TAC_STAT_CD             string\n    TRNSPRTN_ACNT_TX        string\n    TRNSPRTN_ACNT_BGN_DT    string\n    TRNSPRTN_ACNT_END_DT    string\n    DD_ACTVTY_ADRS_ID       string\n    TAC_BLLD_ADD_FRST_LN_TX string\n    TAC_BLLD_ADD_SCND_LN_TX string\n    TAC_BLLD_ADD_THRD_LN_TX string\n    TAC_BLLD_ADD_FRTH_LN_TX string\n    TAC_FNCT_POC_NM         string\n}\n\n")),(0,a.kt)("h2",{id:"expected-results"},"Expected Results"),(0,a.kt)("p",null,"The tac parsing package was created with the assumption that the following data is desired to return for further processing as desired:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'type TransportationAccountingCodeDesiredFromTRDM struct {\n    TAC/*Third in line, values[2]*/ string                      `json:"tac"`\n    BillingAddressFirstLine/*20th in line, values[19]*/ string  `json:"billing_address_first_line"`\n    BillingAddressSecondLine/*21st in line, values[20]*/ string `json:"billing_address_second_line"`\n    BillingAddressThirdLine/*22nd in line, values[21]*/ string  `json:"billing_address_third_line"`\n    BillingAddressFourthLine/*23rd in line, values[22]*/ string `json:"billing_address_fourth_line"`\n    Transaction/*16th in line, values[15]*/ string              `json:"transaction"`\n    EffectiveDate/*17th in line, values[16]*/ time.Time         `json:"effective_date"`\n    ExpirationDate/*18th in line, values[17]*/ time.Time        `json:"expiration_date"`\n    FiscalYear/*4th in line, values[3]*/ string                 `json:"fiscal_year"`\n}\n')),(0,a.kt)("p",null,'Do note that currently only "TAC" is stored within MilMove, the additional fields are for future use.'),(0,a.kt)("h2",{id:"parsing-functions"},"Parsing Functions"),(0,a.kt)("p",null,"The primary ",(0,a.kt)("inlineCode",{parentName:"p"},"parse")," function will expect to receive a .txt file. Upon receival of this .txt file, it will parse it into go struct for further processing and importing into the database, as desired."),(0,a.kt)("h2",{id:"additional-processing-functions"},"Additional Processing Functions"),(0,a.kt)("h3",{id:"pruning"},"Pruning"),(0,a.kt)("p",null,"You can optionally call ",(0,a.kt)("inlineCode",{parentName:"p"},"PruneExpiredTACsDesiredFromTRDM")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsolidateDuplicateTACsDesiredFromTRDM")," functions to further process the parsed TACs."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PruneExpiredTACsDesiredFromTRDM")," removes all TACs with an expiration date in the past."),(0,a.kt)("h3",{id:"consolidating--removing-duplicates"},"Consolidating / Removing Duplicates"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConsolidateDuplicateTACsDesiredFromTRDM"),' consolidates TACs with the same TAC value. Duplicate "Transaction", aka description, values are combined with a delimiter of "',(0,a.kt)("em",{parentName:"p"},". Additional description found: "),'" to be more readable.'))}u.isMDXComponent=!0}}]);